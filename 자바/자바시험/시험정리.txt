
객체지향언어 : 객체 간의 *메시지 통신을 이용하여 동작하는 방식. java, c++
*메시지: 객체간의 매서드 호출을 통해서 이루어진다

절차지향과 객체지향의 차이
절차지향언어 : 절차가 중점이 됨 print(학생정보)
객체지향언어 : 객체의 종류와 속성 등에 더 중점을 둔 개발 패러다임 학생정보.print()

-절차 : 전체적인 기능 동작을 고려한 각 단계별 기능 구현, 복잡도가 단순하고 실행속도 빠름, 보안성 낮음 C
-객체 : 필요한 속성의 객체 모델링 후 상호작용기능 구현, 유지보수 굿, 대형 프로젝트에 적합, 속도가 느리고 메모리 사용 높음, 보안성 높음  java, c++, python

뭔소리야?
걍 메서드 불러온다는거아냐?
아닌데 ㅅㅂ 뭔소리야?


객체지향의 구성요소
객체 : 객체와 속성, 메서드
클래스 

객체지향의 특징 캡상다추정관?
-캡슐화 : 연관된 데이터와 데이터를 처리하는 함수를 [함께 묶어 필요한 인터페이스만 노출]
-상속 : 하위 클래스에서 상위 클래스의 속성과 메서드를 [물려 받는 기법으로] 클래스와 객체의 재사용 가능
-다형성 : 하나의 메시지에 대해 [각 객체의 고유한 방법으로 응답] 어어.. 뭔소리야? (오버로딩, 오버라이딩)
-추상화 : 불필요한 부분은 생략하고 중요한 부분에 집중하여 모델링 (인터페이스)
-정보은닉 : 다른 객체에서 자신의 필드 및 메서드 등을 은닉하고 자신만의 연산만을 통하여 접근 허용(private, public ..)
-관계성


코드리뷰 기법
-동료검토 : 걍 동료들끼리 돌려보고 수정
-워크스루 : 조금 더 공식적인? 동료끼리 발표하고 의견듣기
-인스펙션 :  정형적이고 체계적인 방법으로 소프트웨어의 코드나 문서를 검토하는 절차 어어.. 그래 뭔소리야? 공식적인 리뷰 기법
-리팩토링 : 뭐.. 뭔소리야? 암튼 뭐 개선하는거임 sw의 원래 기능은 유지하면서 내부구조 수정 및 보완


디자인패턴
-생성 빌프로팩앱싱
-구조 브데퍼플프록컴어
-행위 미인이템옵스테비커스트메체

응높결낮
응집도가 높을수록(강할수록) 
결합도가 낮을수록(약할수록) 품질이 높다

품질낮은순
응집도 - 우논시절통순기(낮은순)
결합도 - 내공외제스자(높은순)


public : 모든 접근 허용
protected : 자신 및 상속받은 자식 
private : 자신 클래스의 메서드에서만 접근허용
default : 같은 패키지에서만 모두 접근 가능


